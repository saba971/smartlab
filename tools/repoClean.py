#!/usr/bin/env python
import os
import sys
import re
import telnetlib
import time
import commands
import paramiko
import logging
from optparse import OptionParser

parser = OptionParser()
parser.add_option("--pcta", dest="pcta",default="", help="PCTA IP")
parser.add_option("--pctaPasswd", dest="pctaPasswd",default="alcatel01", help="PCTA password info")
parser.add_option("--pctaUser", dest="pctaUser",default="atxuser", help="PCTA user info")
parser.add_option("--pctaPort", dest="pctaPort",default="22", help="PCTA ssh port")
parser.add_option("--repoPath", dest="repoPath",default="", help="repo path")
(options, args) = parser.parse_args()
pcta = options.pcta
pctaPasswd = options.pctaPasswd
pctaUser = options.pctaUser
pctaPort = options.pctaPort
repoPath = options.repoPath

def cleanup(logfile):
    global mail
    ip=logfile.split('_')[0]
    if mail == 1:
        cmd='cat /tmp/'+logfile+'|mailx -s "Autogenerated: Repo cleaner %s" -c "kamaraj.kuppusamy@alcatel-lucent.com" "joe.gladston@alcatel-lucent.com"'%ip
        commands.getoutput(cmd)

def check_retval(retval):
    if 'ReturnVal=0' in retval:
        return True
    else:
        return False

def check_status(out):
   #logging.info(str(out))
    for line in out:
        pattern = re.compile('^(M|A|R|C|!|I) (.*)')
        matchline = pattern.search(line)
        if matchline is not None:
            return True
    return False

def check_revert(out,err):
    logging.info(str(out))
    if len(err) == 0:
        return True
    else:
        return Flase

def check_sum(tn):
    tn.write('hg summary \n')
    out = tn.read_until("*",5)
    tn.write('echo "ReturnVal=$?"\n')
    retval = tn.read_until("*",1)  
    logging.info(out)
    logging.info(retval)
    lines = out.split('\n')
    if check_retval(retval):
        for line in lines:
            pattern = re.compile('update:[\s\t]+\(current\)')
            match = pattern.match(line)
            if match is not None:
                return True
        return False
    else:
        print "-o- hg sum failed"
        return False

newpassword='123456'
repos=['/repo/atxuser/atc','/repo/atxuser/robot','/repo/TEST_PACKAGES']
logging.basicConfig(format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',datefmt='%m-%d-%y %H:%M:%s',level=logging.DEBUG)
logging.getLogger("paramiko").setLevel(logging.WARNING)
for repo in repos:
    print "-+-------------------------------------------+-"
    print "-+- Checking for %20s repo -+-"%repo
    print "-+-------------------------------------------+-"
    logging.info('START')   
    logging.info(repo)   
    mail=0
    loop=1
    loop=1
    ssh=paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh.connect(pcta,username=pctaUser,password=pctaPasswd,port=int(pctaPort))
    except:
        ssh.connect(pcta,username=pctaUser,password=newpassword,port=int(pctaPort))
    cmd = 'cd '+repo
    stdin, stdout, stderr = ssh.exec_command(cmd)
    logging.info(cmd)
    if len(stderr.readlines()) == 0:
        rrepo= repo.split('/')[-1]
        if 'robot' == rrepo or 'atc' == rrepo:
            stdin, stdout, stderr = ssh.exec_command('hg -R '+repo+' cat -r tip /repo/atxuser/'+rrepo+'/env/config_hgrc > /repo/atxuser/'+rrepo+'/.hg/hgrc')
            logging.info(cmd)
            logging.info(stdout.read())
    else:
        logging.info("%s does not exists!"%repo)
        print "-o- %s does not exists!"%repo
        cleanup(logfile)
        mail=1
        ssh.close()
        break

    cmd = 'hg -R '+repo+' status'
    stdin, stdout, stderr = ssh.exec_command(cmd)
    logging.info(cmd)
    if check_status(stdout.readlines()):
        cmd = 'hg -R '+repo+' revert --all'
        stdin, stdout, stderr = ssh.exec_command(cmd)
        logging.info(cmd)
        if check_revert(stdout.readlines(),stderr.readlines()):
            logging.info("hg revert --> OK")
            print "-o- hg revert --> OK"
        else:
            logging.info("Repo has edited files,couldnt clean. exiting....")
            print "-o- Repo has edited files,couldnt clean. exiting...."
            cleanup(logfile)
            mail=1
            ssh.close()
            break
    else:
        logging.info("hg status --> OK")
        print "-o- hg status --> OK"

    cmd = 'hg -R '+repo+' outgoing -q --template \'{node}\\n\' ssh://remoteuser@135.249.31.114//repo/isamtestserver/'+repo.split('/')[-1]
    stdin, stdout, stderr = ssh.exec_command(cmd)
    logging.info(cmd)
    revs=stdout.readlines()
    logging.info(revs)
    if len(revs) > 0:
        logging.info("hg outgoing found")
        print "-o- hg outgoing found"
        print revs
        for newrev in revs:
            cmd = 'hg -R '+repo+' strip -f '+newrev.strip()
            stdin, stdout, stderr = ssh.exec_command(cmd)
            logging.info(cmd)
            error=stderr.read()
            if len(error) == 0:
                logging.info("hg strip done --> OK")
                print "\n-o- hg strip done --> OK"
            else:
                logging.info("hg strip command failed --> NOK")
                print "-o- hg strip command failed --> NOK"
                print error
                logging.info(error)
                logging.info(stdout.read())
    else:
        logging.info("No outgoing contents")
        print "-o- No outgoing contents"

    cmd = 'hg -R '+repo+' outgoing -q --template \'{node}\\n\' ssh://remoteuser@135.249.31.114//repo/isamtestserver/'+repo.split('/')[-1]
    stdin, stdout, stderr = ssh.exec_command(cmd)
    logging.info(cmd)
    logging.info(stdout.read())
    revs=stdout.readlines()
    if len(revs) == 0:
        logging.info("%s Repo is clean ...."%repo)
        print "-o- %s Repo is clean ....\n"%repo
        cmd = 'hg -R '+repo+' pull ssh://remoteuser@135.249.31.114//repo/isamtestserver/'+repo.split('/')[-1]
        stdin, stdout, stderr = ssh.exec_command(cmd)
        logging.info(cmd)
        logging.info(stdout.read())
        print "-o- %s Repo in sync with central repo ....\n"%repo
        cmd = 'hg -R '+repo+' update -C' 
        stdin, stdout, stderr = ssh.exec_command(cmd)
        logging.info(cmd)
        logging.info(stdout.read())
    else:
        logging.info("%s Repo cleaning Failed"%repo)
        print "-o- %s Repo cleaning Failed\n"%repo
        mail=1
    cmd = 'hg status -R '+repo
    stdin, stdout, stderr = ssh.exec_command(cmd)
    logging.info(cmd)
   #logging.info(stdout.read())
    cmd = 'hg purge -R '+repo
    stdin, stdout, stderr = ssh.exec_command(cmd)
    logging.info(cmd)
    logging.info(stdout.read())

    ssh.close()
    logging.info('END')   
